
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wdqdvvsygjgrhmafovjb.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndkcWR2dnN5Z2pncmhtYWZvdmpiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgwMjM1MTgsImV4cCI6MjA2MzU5OTUxOH0.ai68XvoLXEbk5d6EG_UzbN2QdJOP8dl87Xv4cjdLjJ0";

// Streamlined Supabase client configuration
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce'
  },
  global: {
    headers: {
      'x-client-info': 'dog-enrichment-app'
    }
  },
  db: {
    schema: 'public'
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
});

// Lightweight connection checker for NetworkResilience hook
export const checkSupabaseConnection = async (): Promise<boolean> => {
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000);
    
    const { error } = await supabase
      .from('dogs')
      .select('id')
      .limit(1)
      .abortSignal(controller.signal);
    
    clearTimeout(timeoutId);
    
    if (error) {
      console.warn('üåê Connection check failed:', error.message);
      return false;
    }
    
    return true;
  } catch (error) {
    console.warn('üåê Connection check error:', error);
    return false;
  }
};
