// This file is automatically generated. Do not edit it directly.
import { createClient } from "@supabase/supabase-js";
import type { Database } from "./types";

const SUPABASE_URL = "https://wdqdvvsygjgrhmafovjb.supabase.co";
const SUPABASE_PUBLISHABLE_KEY =
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndkcWR2dnN5Z2pncmhtYWZvdmpiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgwMjM1MTgsImV4cCI6MjA2MzU5OTUxOH0.ai68XvoLXEbk5d6EG_UzbN2QdJOP8dl87Xv4cjdLjJ0";

// Optimized Supabase client configuration for better reliability
export const supabase = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      storage: localStorage,
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      flowType: "pkce",
    },
    global: {
      headers: {
        "x-client-info": "dog-enrichment-app",
      },
    },
    db: {
      schema: "public",
    },
    realtime: {
      params: {
        eventsPerSecond: 10,
      },
    },
  },
);

// Enhanced connection checker with better error handling
export const checkSupabaseConnection = async (): Promise<boolean> => {
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 3000); // Reduced from 5s to 3s

    // Use a simple query that should work regardless of RLS
    const { error } = await supabase
      .from("dogs")
      .select("id")
      .limit(1)
      .abortSignal(controller.signal);

    clearTimeout(timeoutId);

    // If we get an RLS error, that means we're connected but not authenticated
    // This is actually a successful connection test
    if (error) {
      if (
        error.message.includes("row-level security") ||
        error.message.includes("RLS") ||
        error.message.includes("permission denied")
      ) {
        console.log("üîê Connection verified (RLS working as expected)");
        return true;
      }
      console.warn("üåê Connection check failed:", error.message);
      return false;
    }

    console.log("‚úÖ Connection check successful");
    return true;
  } catch (error: any) {
    if (error?.name === "AbortError") {
      console.warn("üåê Connection check timeout");
    } else {
      console.warn("üåê Connection check error:", error);
    }
    return false;
  }
};

// Health check function for monitoring
export const performHealthCheck = async (): Promise<{
  connected: boolean;
  authenticated: boolean;
  latency: number;
}> => {
  const startTime = Date.now();

  try {
    const {
      data: { user },
    } = await supabase.auth.getUser();
    const connected = await checkSupabaseConnection();
    const latency = Date.now() - startTime;

    return {
      connected,
      authenticated: !!user,
      latency,
    };
  } catch (error) {
    return {
      connected: false,
      authenticated: false,
      latency: Date.now() - startTime,
    };
  }
};
